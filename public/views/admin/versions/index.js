/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!****************************************************!*\
  !*** ./resources/js/views/admin/versions/index.js ***!
  \****************************************************/
$(function () {
  // Onload handler
  window.history.replaceState({
    "content": $("#inner-content").html()
  }, "", window.location.href);
  var form = $("#filters");
  new RTLoader("filters", {
    url: form.prop("action"),
    action: form.prop("method"),
    data: form.serialize(),
    pushHistoryState: true,
    success: function success(data) {
      var _head$querySelector;
      // Replace nonce...
      var nonce = (_head$querySelector = head.querySelector('meta[name="csp-nonce"]')) === null || _head$querySelector === void 0 ? void 0 : _head$querySelector.getAttribute('content');
      data = data.replaceAll(/(nonce=)(.\w+.)/gm, "$1\"".concat(nonce, "\""));
      data = new DOMParser().parseFromString(data, "text/html");
      filters = data.querySelector("#filters");
      form = data.querySelector("#table-content");
      $("#filters").html(filters.innerHTML);
      $("#table-content").html(form.innerHTML);
    }
  });

  // Filters submit handler
  $(document).on("submit", "#filters", function (e) {
    e.preventDefault();
    e.stopPropagation();
  });

  // Reset handler
  $(document).on("reset", "#filters", function (e) {
    var _obj$prop;
    var obj = $(e.currentTarget);
    $.ajax({
      "url": (_obj$prop = obj.prop("action")) !== null && _obj$prop !== void 0 ? _obj$prop : window.location.href.split("?")[0],
      "type": obj.prop("method"),
      "success": function success(data) {
        data = new DOMParser().parseFromString(data, "text/html");
        filters = data.querySelector("#filters");
        form = data.querySelector("#table-content");
        $("#filters").html(filters.innerHTML);
        $("#table-content").html(form.innerHTML);

        // History handler
        window.history.pushState({
          "content": $("#inner-content").html()
        }, "", window.location.href.split("?")[0]);
      }
    });
  });

  // Popstate handler
  $(window).on("popstate", function (e) {
    var data = e.originalEvent.state.content;
    $("#filters").html(filters.innerHTML);
    $("#table-content").html(form.innerHTML);
  });
});
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBQ0MsU0FBUyxDQUFDO1FBQ3JDMUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDSSxJQUFJLENBQUNHLElBQUksQ0FBQ21CLFNBQVMsQ0FBQzs7UUFFeEM7UUFDQXpCLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDbUMsU0FBUyxDQUN2QjtVQUFDLFNBQVMsRUFBRXJDLENBQUMsaUJBQWlCLENBQUMsQ0FBQ0ksSUFBSSxDQUFDO1FBQUMsQ0FBQyxFQUN2QyxFQUFFLEVBQ0ZILE1BQU0sQ0FBQ0ksUUFBUSxDQUFDQyxJQUFJLENBQUM4QixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUNsQyxDQUFDO01BQ0Y7SUFDRCxDQUFDLENBQUM7RUFDSCxDQUFDLENBQUM7O0VBRUY7RUFDQXBDLENBQUMsQ0FBQ0MsTUFBTSxDQUFDLENBQUMyQixFQUFFLGFBQWEsVUFBQ0MsQ0FBQyxFQUFLO0lBQy9CLElBQUlqQixJQUFJLEdBQUdpQixDQUFDLENBQUNTLGFBQWEsQ0FBQ0MsS0FBSyxDQUFDQyxPQUFPO0lBRXhDeEMsQ0FBQyxXQUFXLENBQUMsQ0FBQ0ksSUFBSSxDQUFDcUIsT0FBTyxDQUFDQyxTQUFTLENBQUM7SUFDckMxQixDQUFDLGlCQUFpQixDQUFDLENBQUNJLElBQUksQ0FBQ0csSUFBSSxDQUFDbUIsU0FBUyxDQUFDO0VBQ3pDLENBQUMsQ0FBQztBQUNILENBQUMsQ0FBQyxDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL3ZpZXdzL2FkbWluL3ZlcnNpb25zL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIiQoKCkgPT4ge1xuXHQvLyBPbmxvYWQgaGFuZGxlclxuXHR3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoXG5cdFx0e1wiY29udGVudFwiOiAkKGAjaW5uZXItY29udGVudGApLmh0bWwoKX0sXG5cdFx0XCJcIixcblx0XHR3aW5kb3cubG9jYXRpb24uaHJlZlxuXHQpO1xuXG5cdGxldCBmb3JtID0gJChgI2ZpbHRlcnNgKTtcblx0bmV3IFJUTG9hZGVyKFwiZmlsdGVyc1wiLCB7XG5cdFx0dXJsOiBmb3JtLnByb3AoYGFjdGlvbmApLFxuXHRcdGFjdGlvbjogZm9ybS5wcm9wKGBtZXRob2RgKSxcblx0XHRkYXRhOiBmb3JtLnNlcmlhbGl6ZSgpLFxuXHRcdHB1c2hIaXN0b3J5U3RhdGU6IHRydWUsXG5cdFx0c3VjY2VzczogKGRhdGEpID0+IHtcblx0XHRcdC8vIFJlcGxhY2Ugbm9uY2UuLi5cblx0XHRcdGxldCBub25jZSA9IGhlYWQucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPVwiY3NwLW5vbmNlXCJdJyk/LmdldEF0dHJpYnV0ZSgnY29udGVudCcpO1xuXHRcdFx0ZGF0YSA9IGRhdGEucmVwbGFjZUFsbCgvKG5vbmNlPSkoLlxcdysuKS9nbSwgYCQxXCIke25vbmNlfVwiYCk7XG5cblx0XHRcdGRhdGEgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGRhdGEsIGB0ZXh0L2h0bWxgKTtcblx0XHRcdGZpbHRlcnMgPSBkYXRhLnF1ZXJ5U2VsZWN0b3IoYCNmaWx0ZXJzYCk7XG5cdFx0XHRmb3JtID0gZGF0YS5xdWVyeVNlbGVjdG9yKGAjdGFibGUtY29udGVudGApO1xuXG5cdFx0XHQkKGAjZmlsdGVyc2ApLmh0bWwoZmlsdGVycy5pbm5lckhUTUwpO1xuXHRcdFx0JChgI3RhYmxlLWNvbnRlbnRgKS5odG1sKGZvcm0uaW5uZXJIVE1MKTtcblx0XHR9XG5cdH0pO1xuXG5cdC8vIEZpbHRlcnMgc3VibWl0IGhhbmRsZXJcblx0JChkb2N1bWVudCkub24oYHN1Ym1pdGAsIGAjZmlsdGVyc2AsIChlKSA9PiB7XG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH0pO1xuXG5cdC8vIFJlc2V0IGhhbmRsZXJcblx0JChkb2N1bWVudCkub24oYHJlc2V0YCwgYCNmaWx0ZXJzYCwgKGUpID0+IHtcblx0XHRsZXQgb2JqID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuXG5cdFx0JC5hamF4KHtcblx0XHRcdFwidXJsXCI6IG9iai5wcm9wKGBhY3Rpb25gKSA/PyB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdChcIj9cIilbMF0sXG5cdFx0XHRcInR5cGVcIjogb2JqLnByb3AoYG1ldGhvZGApLFxuXHRcdFx0XCJzdWNjZXNzXCI6IChkYXRhKSA9PiB7XG5cdFx0XHRcdGRhdGEgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGRhdGEsIGB0ZXh0L2h0bWxgKTtcblxuXHRcdFx0XHRmaWx0ZXJzID0gZGF0YS5xdWVyeVNlbGVjdG9yKGAjZmlsdGVyc2ApO1xuXHRcdFx0XHRmb3JtID0gZGF0YS5xdWVyeVNlbGVjdG9yKGAjdGFibGUtY29udGVudGApO1xuXG5cdFx0XHRcdCQoYCNmaWx0ZXJzYCkuaHRtbChmaWx0ZXJzLmlubmVySFRNTCk7XG5cdFx0XHRcdCQoYCN0YWJsZS1jb250ZW50YCkuaHRtbChmb3JtLmlubmVySFRNTCk7XG5cblx0XHRcdFx0Ly8gSGlzdG9yeSBoYW5kbGVyXG5cdFx0XHRcdHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShcblx0XHRcdFx0XHR7XCJjb250ZW50XCI6ICQoYCNpbm5lci1jb250ZW50YCkuaHRtbCgpfSxcblx0XHRcdFx0XHRcIlwiLFxuXHRcdFx0XHRcdHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNwbGl0KFwiP1wiKVswXVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcblxuXHQvLyBQb3BzdGF0ZSBoYW5kbGVyXG5cdCQod2luZG93KS5vbihgcG9wc3RhdGVgLCAoZSkgPT4ge1xuXHRcdGxldCBkYXRhID0gZS5vcmlnaW5hbEV2ZW50LnN0YXRlLmNvbnRlbnQ7XG5cblx0XHQkKGAjZmlsdGVyc2ApLmh0bWwoZmlsdGVycy5pbm5lckhUTUwpO1xuXHRcdCQoYCN0YWJsZS1jb250ZW50YCkuaHRtbChmb3JtLmlubmVySFRNTCk7XG5cdH0pO1xufSk7XG4iXSwibmFtZXMiOlsiJCIsIndpbmRvdyIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJodG1sIiwibG9jYXRpb24iLCJocmVmIiwiZm9ybSIsIlJUTG9hZGVyIiwidXJsIiwicHJvcCIsImFjdGlvbiIsImRhdGEiLCJzZXJpYWxpemUiLCJwdXNoSGlzdG9yeVN0YXRlIiwic3VjY2VzcyIsIl9oZWFkJHF1ZXJ5U2VsZWN0b3IiLCJub25jZSIsImhlYWQiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0QXR0cmlidXRlIiwicmVwbGFjZUFsbCIsImNvbmNhdCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImZpbHRlcnMiLCJpbm5lckhUTUwiLCJkb2N1bWVudCIsIm9uIiwiZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiX29iaiRwcm9wIiwib2JqIiwiY3VycmVudFRhcmdldCIsImFqYXgiLCJzcGxpdCIsInB1c2hTdGF0ZSIsIm9yaWdpbmFsRXZlbnQiLCJzdGF0ZSIsImNvbnRlbnQiXSwic291cmNlUm9vdCI6IiJ9