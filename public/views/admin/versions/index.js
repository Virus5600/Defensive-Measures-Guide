/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!****************************************************!*\
  !*** ./resources/js/views/admin/versions/index.js ***!
  \****************************************************/
$(function () {
  // Onload handler
  window.history.replaceState({
    "content": $("#inner-content").html()
  }, "", window.location.href);
  var form = $("#filters");
  new RTLoader("filters", {
    url: form.prop("action"),
    action: form.prop("method"),
    data: form.serialize(),
    pushHistoryState: true,
    success: function success(data) {
      // Replace nonce...
      if (data.includes("nonce=")) data = data.replaceAll(/(nonce=)(.\w+.)/g, "$1".concat(document.querySelector('meta[name="csp-nonce"]').content));
      data = new DOMParser().parseFromString(data, "text/html");
      filters = data.querySelector("#filters");
      form = data.querySelector("#table-content");
      $("#filters").html(filters.innerHTML);
      $("#table-content").html(form.innerHTML);
    }
  });

  // Filters submit handler
  $(document).on("submit", "#filters", function (e) {
    e.preventDefault();
    e.stopPropagation();
  });

  // Reset handler
  $(document).on("reset", "#filters", function (e) {
    var _obj$prop;
    var obj = $(e.currentTarget);
    $.ajax({
      "url": (_obj$prop = obj.prop("action")) !== null && _obj$prop !== void 0 ? _obj$prop : window.location.href.split("?")[0],
      "type": obj.prop("method"),
      "success": function success(data) {
        if (data.includes("nonce=")) data = data.replaceAll(/(nonce=)(.\w+.)/g, "$1".concat(document.querySelector('meta[name="csp-nonce"]').content));
        data = new DOMParser().parseFromString(data, "text/html");
        filters = data.querySelector("#filters");
        form = data.querySelector("#table-content");
        $("#filters").html(filters.innerHTML);
        $("#table-content").html(form.innerHTML);

        // History handler
        window.history.pushState({
          "content": $("#inner-content").html()
        }, "", window.location.href.split("?")[0]);
      }
    });
  });

  // Popstate handler
  $(window).on("popstate", function (e) {
    var data = e.originalEvent.state.content;
    $("#filters").html(filters.innerHTML);
    $("#table-content").html(form.innerHTML);
  });
});
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YSxXQUFXLENBQUM7UUFDeENiLElBQUksR0FBR0ssSUFBSSxDQUFDUSxhQUFhLGlCQUFpQixDQUFDO1FBRTNDcEIsQ0FBQyxXQUFXLENBQUMsQ0FBQ0ksSUFBSSxDQUFDb0IsT0FBTyxDQUFDQyxTQUFTLENBQUM7UUFDckN6QixDQUFDLGlCQUFpQixDQUFDLENBQUNJLElBQUksQ0FBQ0csSUFBSSxDQUFDa0IsU0FBUyxDQUFDOztRQUV4QztRQUNBeEIsTUFBTSxDQUFDQyxPQUFPLENBQUNpQyxTQUFTLENBQ3ZCO1VBQUMsU0FBUyxFQUFFbkMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDSSxJQUFJLENBQUM7UUFBQyxDQUFDLEVBQ3ZDLEVBQUUsRUFDRkgsTUFBTSxDQUFDSSxRQUFRLENBQUNDLElBQUksQ0FBQzRCLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQ2xDLENBQUM7TUFDRjtJQUNELENBQUMsQ0FBQztFQUNILENBQUMsQ0FBQzs7RUFFRjtFQUNBbEMsQ0FBQyxDQUFDQyxNQUFNLENBQUMsQ0FBQ3lCLEVBQUUsYUFBYSxVQUFDQyxDQUFDLEVBQUs7SUFDL0IsSUFBSWYsSUFBSSxHQUFHZSxDQUFDLENBQUNTLGFBQWEsQ0FBQ0MsS0FBSyxDQUFDaEIsT0FBTztJQUV4Q3JCLENBQUMsV0FBVyxDQUFDLENBQUNJLElBQUksQ0FBQ29CLE9BQU8sQ0FBQ0MsU0FBUyxDQUFDO0lBQ3JDekIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDSSxJQUFJLENBQUNHLElBQUksQ0FBQ2tCLFNBQVMsQ0FBQztFQUN6QyxDQUFDLENBQUM7QUFDSCxDQUFDLENBQUMsQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy92aWV3cy9hZG1pbi92ZXJzaW9ucy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIkKCgpID0+IHtcblx0Ly8gT25sb2FkIGhhbmRsZXJcblx0d2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKFxuXHRcdHtcImNvbnRlbnRcIjogJChgI2lubmVyLWNvbnRlbnRgKS5odG1sKCl9LFxuXHRcdFwiXCIsXG5cdFx0d2luZG93LmxvY2F0aW9uLmhyZWZcblx0KTtcblxuXHRsZXQgZm9ybSA9ICQoYCNmaWx0ZXJzYCk7XG5cdG5ldyBSVExvYWRlcihcImZpbHRlcnNcIiwge1xuXHRcdHVybDogZm9ybS5wcm9wKGBhY3Rpb25gKSxcblx0XHRhY3Rpb246IGZvcm0ucHJvcChgbWV0aG9kYCksXG5cdFx0ZGF0YTogZm9ybS5zZXJpYWxpemUoKSxcblx0XHRwdXNoSGlzdG9yeVN0YXRlOiB0cnVlLFxuXHRcdHN1Y2Nlc3M6IChkYXRhKSA9PiB7XG5cdFx0XHQvLyBSZXBsYWNlIG5vbmNlLi4uXG5cdFx0XHRpZiAoZGF0YS5pbmNsdWRlcyhcIm5vbmNlPVwiKSlcblx0XHRcdFx0ZGF0YSA9IGRhdGEucmVwbGFjZUFsbCgvKG5vbmNlPSkoLlxcdysuKS9nLCBgJDEke2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21ldGFbbmFtZT1cImNzcC1ub25jZVwiXScpLmNvbnRlbnR9YCk7XG5cblx0XHRcdGRhdGEgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGRhdGEsIGB0ZXh0L2h0bWxgKTtcblx0XHRcdGZpbHRlcnMgPSBkYXRhLnF1ZXJ5U2VsZWN0b3IoYCNmaWx0ZXJzYCk7XG5cdFx0XHRmb3JtID0gZGF0YS5xdWVyeVNlbGVjdG9yKGAjdGFibGUtY29udGVudGApO1xuXG5cdFx0XHQkKGAjZmlsdGVyc2ApLmh0bWwoZmlsdGVycy5pbm5lckhUTUwpO1xuXHRcdFx0JChgI3RhYmxlLWNvbnRlbnRgKS5odG1sKGZvcm0uaW5uZXJIVE1MKTtcblx0XHR9XG5cdH0pO1xuXG5cdC8vIEZpbHRlcnMgc3VibWl0IGhhbmRsZXJcblx0JChkb2N1bWVudCkub24oYHN1Ym1pdGAsIGAjZmlsdGVyc2AsIChlKSA9PiB7XG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH0pO1xuXG5cdC8vIFJlc2V0IGhhbmRsZXJcblx0JChkb2N1bWVudCkub24oYHJlc2V0YCwgYCNmaWx0ZXJzYCwgKGUpID0+IHtcblx0XHRsZXQgb2JqID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuXG5cdFx0JC5hamF4KHtcblx0XHRcdFwidXJsXCI6IG9iai5wcm9wKGBhY3Rpb25gKSA/PyB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdChcIj9cIilbMF0sXG5cdFx0XHRcInR5cGVcIjogb2JqLnByb3AoYG1ldGhvZGApLFxuXHRcdFx0XCJzdWNjZXNzXCI6IChkYXRhKSA9PiB7XG5cdFx0XHRcdGlmIChkYXRhLmluY2x1ZGVzKFwibm9uY2U9XCIpKVxuXHRcdFx0XHRcdGRhdGEgPSBkYXRhLnJlcGxhY2VBbGwoLyhub25jZT0pKC5cXHcrLikvZywgYCQxJHtkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9XCJjc3Atbm9uY2VcIl0nKS5jb250ZW50fWApO1xuXHRcdFx0XHRkYXRhID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhkYXRhLCBgdGV4dC9odG1sYCk7XG5cblx0XHRcdFx0ZmlsdGVycyA9IGRhdGEucXVlcnlTZWxlY3RvcihgI2ZpbHRlcnNgKTtcblx0XHRcdFx0Zm9ybSA9IGRhdGEucXVlcnlTZWxlY3RvcihgI3RhYmxlLWNvbnRlbnRgKTtcblxuXHRcdFx0XHQkKGAjZmlsdGVyc2ApLmh0bWwoZmlsdGVycy5pbm5lckhUTUwpO1xuXHRcdFx0XHQkKGAjdGFibGUtY29udGVudGApLmh0bWwoZm9ybS5pbm5lckhUTUwpO1xuXG5cdFx0XHRcdC8vIEhpc3RvcnkgaGFuZGxlclxuXHRcdFx0XHR3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoXG5cdFx0XHRcdFx0e1wiY29udGVudFwiOiAkKGAjaW5uZXItY29udGVudGApLmh0bWwoKX0sXG5cdFx0XHRcdFx0XCJcIixcblx0XHRcdFx0XHR3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdChcIj9cIilbMF1cblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG5cblx0Ly8gUG9wc3RhdGUgaGFuZGxlclxuXHQkKHdpbmRvdykub24oYHBvcHN0YXRlYCwgKGUpID0+IHtcblx0XHRsZXQgZGF0YSA9IGUub3JpZ2luYWxFdmVudC5zdGF0ZS5jb250ZW50O1xuXG5cdFx0JChgI2ZpbHRlcnNgKS5odG1sKGZpbHRlcnMuaW5uZXJIVE1MKTtcblx0XHQkKGAjdGFibGUtY29udGVudGApLmh0bWwoZm9ybS5pbm5lckhUTUwpO1xuXHR9KTtcbn0pO1xuIl0sIm5hbWVzIjpbIiQiLCJ3aW5kb3ciLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwiaHRtbCIsImxvY2F0aW9uIiwiaHJlZiIsImZvcm0iLCJSVExvYWRlciIsInVybCIsInByb3AiLCJhY3Rpb24iLCJkYXRhIiwic2VyaWFsaXplIiwicHVzaEhpc3RvcnlTdGF0ZSIsInN1Y2Nlc3MiLCJpbmNsdWRlcyIsInJlcGxhY2VBbGwiLCJjb25jYXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50IiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiZmlsdGVycyIsImlubmVySFRNTCIsIm9uIiwiZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiX29iaiRwcm9wIiwib2JqIiwiY3VycmVudFRhcmdldCIsImFqYXgiLCJzcGxpdCIsInB1c2hTdGF0ZSIsIm9yaWdpbmFsRXZlbnQiLCJzdGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=