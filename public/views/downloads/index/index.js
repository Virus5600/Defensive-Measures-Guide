/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!***********************************************!*\
  !*** ./resources/js/views/downloads/index.js ***!
  \***********************************************/
$(function () {
  // Onload handler
  window.history.replaceState({
    "content": $("#inner-content").html()
  }, "", window.location.href);
  var form = $("#filters");
  new RTLoader("filters", {
    url: form.prop("action"),
    action: form.prop("method"),
    data: form.serialize(),
    pushHistoryState: true,
    success: function success(data) {
      var _head$querySelector;
      // Replace nonce...
      var nonce = (_head$querySelector = head.querySelector('meta[name="csp-nonce"]')) === null || _head$querySelector === void 0 ? void 0 : _head$querySelector.getAttribute('content');
      data = data.replaceAll(/(nonce=)(.\w+.)/gm, "$1\"".concat(nonce, "\""));
      data = new DOMParser().parseFromString(data, "text/html");
      filters = data.querySelector("#filters");
      form = data.querySelector("#table-content");
      $("#filters").html(filters.innerHTML);
      $("#table-content").html(form.innerHTML);
    },
    popstateEvent: {
      enabled: true,
      fn: function fn(e) {
        var data = e.state;
        console.log(data);
        $("#filters").html(data.filters);
        $("#table-content").html(data.form);
      }
    }
  });

  // Filters submit handler
  $(document).on("submit", "#filters", function (e) {
    e.preventDefault();
    e.stopPropagation();
  });

  // Reset handler
  $(document).on("reset", "#filters", function (e) {
    var _obj$prop;
    var obj = $(e.currentTarget);
    $.ajax({
      "url": (_obj$prop = obj.prop("action")) !== null && _obj$prop !== void 0 ? _obj$prop : window.location.href.split("?")[0],
      "type": obj.prop("method"),
      "success": function success(data) {
        data = new DOMParser().parseFromString(data, "text/html");
        filters = data.querySelector("#filters");
        form = data.querySelector("#table-content");
        $("#filters").html(filters.innerHTML);
        $("#table-content").html(form.innerHTML);

        // History handler
        window.history.pushState({
          "content": $("#inner-content").html()
        }, "", window.location.href.split("?")[0]);
      }
    });
  });
});
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQUM7TUFDL0QsTUFBTSxFQUFFSCxHQUFHLENBQUM3QixJQUFJLFNBQVMsQ0FBQztNQUMxQixTQUFTLEVBQUUsU0FBQUssUUFBQ0gsSUFBSSxFQUFLO1FBQ3BCQSxJQUFJLEdBQUcsSUFBSVcsU0FBUyxDQUFDLENBQUMsQ0FBQ0MsZUFBZSxDQUFDWixJQUFJLGFBQWEsQ0FBQztRQUV6RGEsT0FBTyxHQUFHYixJQUFJLENBQUNPLGFBQWEsV0FBVyxDQUFDO1FBQ3hDWixJQUFJLEdBQUdLLElBQUksQ0FBQ08sYUFBYSxpQkFBaUIsQ0FBQztRQUUzQ25CLENBQUMsV0FBVyxDQUFDLENBQUNJLElBQUksQ0FBQ3FCLE9BQU8sQ0FBQ0MsU0FBUyxDQUFDO1FBQ3JDMUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDSSxJQUFJLENBQUNHLElBQUksQ0FBQ21CLFNBQVMsQ0FBQzs7UUFFeEM7UUFDQXpCLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDeUMsU0FBUyxDQUN2QjtVQUFDLFNBQVMsRUFBRTNDLENBQUMsaUJBQWlCLENBQUMsQ0FBQ0ksSUFBSSxDQUFDO1FBQUMsQ0FBQyxFQUN2QyxFQUFFLEVBQ0ZILE1BQU0sQ0FBQ0ksUUFBUSxDQUFDQyxJQUFJLENBQUNvQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUNsQyxDQUFDO01BQ0Y7SUFDRCxDQUFDLENBQUM7RUFDSCxDQUFDLENBQUM7QUFDSCxDQUFDLENBQUMsQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy92aWV3cy9kb3dubG9hZHMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJCgoKSA9PiB7XG5cdC8vIE9ubG9hZCBoYW5kbGVyXG5cdHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShcblx0XHR7XCJjb250ZW50XCI6ICQoYCNpbm5lci1jb250ZW50YCkuaHRtbCgpfSxcblx0XHRcIlwiLFxuXHRcdHdpbmRvdy5sb2NhdGlvbi5ocmVmXG5cdCk7XG5cblx0bGV0IGZvcm0gPSAkKGAjZmlsdGVyc2ApO1xuXHRuZXcgUlRMb2FkZXIoXCJmaWx0ZXJzXCIsIHtcblx0XHR1cmw6IGZvcm0ucHJvcChgYWN0aW9uYCksXG5cdFx0YWN0aW9uOiBmb3JtLnByb3AoYG1ldGhvZGApLFxuXHRcdGRhdGE6IGZvcm0uc2VyaWFsaXplKCksXG5cdFx0cHVzaEhpc3RvcnlTdGF0ZTogdHJ1ZSxcblx0XHRzdWNjZXNzOiAoZGF0YSkgPT4ge1xuXHRcdFx0Ly8gUmVwbGFjZSBub25jZS4uLlxuXHRcdFx0bGV0IG5vbmNlID0gaGVhZC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9XCJjc3Atbm9uY2VcIl0nKT8uZ2V0QXR0cmlidXRlKCdjb250ZW50Jyk7XG5cdFx0XHRkYXRhID0gZGF0YS5yZXBsYWNlQWxsKC8obm9uY2U9KSguXFx3Ky4pL2dtLCBgJDFcIiR7bm9uY2V9XCJgKTtcblxuXHRcdFx0ZGF0YSA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoZGF0YSwgYHRleHQvaHRtbGApO1xuXHRcdFx0ZmlsdGVycyA9IGRhdGEucXVlcnlTZWxlY3RvcihgI2ZpbHRlcnNgKTtcblx0XHRcdGZvcm0gPSBkYXRhLnF1ZXJ5U2VsZWN0b3IoYCN0YWJsZS1jb250ZW50YCk7XG5cblx0XHRcdCQoYCNmaWx0ZXJzYCkuaHRtbChmaWx0ZXJzLmlubmVySFRNTCk7XG5cdFx0XHQkKGAjdGFibGUtY29udGVudGApLmh0bWwoZm9ybS5pbm5lckhUTUwpO1xuXHRcdH0sXG5cdFx0cG9wc3RhdGVFdmVudDoge1xuXHRcdFx0ZW5hYmxlZDogdHJ1ZSxcblx0XHRcdGZuOiAoZSkgPT4ge1xuXHRcdFx0XHRsZXQgZGF0YSA9IGUuc3RhdGU7XG5cdFx0XHRcdGNvbnNvbGUubG9nKGRhdGEpO1xuXHRcdFx0XHQkKGAjZmlsdGVyc2ApLmh0bWwoZGF0YS5maWx0ZXJzKTtcblx0XHRcdFx0JChgI3RhYmxlLWNvbnRlbnRgKS5odG1sKGRhdGEuZm9ybSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBGaWx0ZXJzIHN1Ym1pdCBoYW5kbGVyXG5cdCQoZG9jdW1lbnQpLm9uKGBzdWJtaXRgLCBgI2ZpbHRlcnNgLCAoZSkgPT4ge1xuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9KTtcblxuXHQvLyBSZXNldCBoYW5kbGVyXG5cdCQoZG9jdW1lbnQpLm9uKGByZXNldGAsIGAjZmlsdGVyc2AsIChlKSA9PiB7XG5cdFx0bGV0IG9iaiA9ICQoZS5jdXJyZW50VGFyZ2V0KTtcblxuXHRcdCQuYWpheCh7XG5cdFx0XHRcInVybFwiOiBvYmoucHJvcChgYWN0aW9uYCkgPz8gd2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQoXCI/XCIpWzBdLFxuXHRcdFx0XCJ0eXBlXCI6IG9iai5wcm9wKGBtZXRob2RgKSxcblx0XHRcdFwic3VjY2Vzc1wiOiAoZGF0YSkgPT4ge1xuXHRcdFx0XHRkYXRhID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhkYXRhLCBgdGV4dC9odG1sYCk7XG5cblx0XHRcdFx0ZmlsdGVycyA9IGRhdGEucXVlcnlTZWxlY3RvcihgI2ZpbHRlcnNgKTtcblx0XHRcdFx0Zm9ybSA9IGRhdGEucXVlcnlTZWxlY3RvcihgI3RhYmxlLWNvbnRlbnRgKTtcblxuXHRcdFx0XHQkKGAjZmlsdGVyc2ApLmh0bWwoZmlsdGVycy5pbm5lckhUTUwpO1xuXHRcdFx0XHQkKGAjdGFibGUtY29udGVudGApLmh0bWwoZm9ybS5pbm5lckhUTUwpO1xuXG5cdFx0XHRcdC8vIEhpc3RvcnkgaGFuZGxlclxuXHRcdFx0XHR3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoXG5cdFx0XHRcdFx0e1wiY29udGVudFwiOiAkKGAjaW5uZXItY29udGVudGApLmh0bWwoKX0sXG5cdFx0XHRcdFx0XCJcIixcblx0XHRcdFx0XHR3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdChcIj9cIilbMF1cblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59KTtcbiJdLCJuYW1lcyI6WyIkIiwid2luZG93IiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsImh0bWwiLCJsb2NhdGlvbiIsImhyZWYiLCJmb3JtIiwiUlRMb2FkZXIiLCJ1cmwiLCJwcm9wIiwiYWN0aW9uIiwiZGF0YSIsInNlcmlhbGl6ZSIsInB1c2hIaXN0b3J5U3RhdGUiLCJzdWNjZXNzIiwiX2hlYWQkcXVlcnlTZWxlY3RvciIsIm5vbmNlIiwiaGVhZCIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRBdHRyaWJ1dGUiLCJyZXBsYWNlQWxsIiwiY29uY2F0IiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiZmlsdGVycyIsImlubmVySFRNTCIsInBvcHN0YXRlRXZlbnQiLCJlbmFibGVkIiwiZm4iLCJlIiwic3RhdGUiLCJjb25zb2xlIiwibG9nIiwiZG9jdW1lbnQiLCJvbiIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiX29iaiRwcm9wIiwib2JqIiwiY3VycmVudFRhcmdldCIsImFqYXgiLCJzcGxpdCIsInB1c2hTdGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=